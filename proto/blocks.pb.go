// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0--rc1
// source: blocks.proto

package blocks

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Block struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BlockHeight       int64                  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ProposedValidator string                 `protobuf:"bytes,2,opt,name=proposed_validator,json=proposedValidator,proto3" json:"proposed_validator,omitempty"`
	GenerationTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=generation_time,json=generationTime,proto3" json:"generation_time,omitempty"`
	TotalFees         string                 `protobuf:"bytes,4,opt,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
	TxHash            string                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TotalTx           int64                  `protobuf:"varint,6,opt,name=total_tx,json=totalTx,proto3" json:"total_tx,omitempty"`
	GasUsed           string                 `protobuf:"bytes,7,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	GasWanted         string                 `protobuf:"bytes,8,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	BlockRewards      string                 `protobuf:"bytes,9,opt,name=block_rewards,json=blockRewards,proto3" json:"block_rewards,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_blocks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *Block) GetProposedValidator() string {
	if x != nil {
		return x.ProposedValidator
	}
	return ""
}

func (x *Block) GetGenerationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenerationTime
	}
	return nil
}

func (x *Block) GetTotalFees() string {
	if x != nil {
		return x.TotalFees
	}
	return ""
}

func (x *Block) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Block) GetTotalTx() int64 {
	if x != nil {
		return x.TotalTx
	}
	return 0
}

func (x *Block) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *Block) GetGasWanted() string {
	if x != nil {
		return x.GasWanted
	}
	return ""
}

func (x *Block) GetBlockRewards() string {
	if x != nil {
		return x.BlockRewards
	}
	return ""
}

type GetBlockInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   int32                  `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ChainId       int32                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockInfoRequest) Reset() {
	*x = GetBlockInfoRequest{}
	mi := &file_blocks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoRequest) ProtoMessage() {}

func (x *GetBlockInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockInfoRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{1}
}

func (x *GetBlockInfoRequest) GetBlockNumber() int32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *GetBlockInfoRequest) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type GetBlockInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   int32                  `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ChainId       int32                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Info          *Block                 `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockInfoResponse) Reset() {
	*x = GetBlockInfoResponse{}
	mi := &file_blocks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoResponse) ProtoMessage() {}

func (x *GetBlockInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockInfoResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{2}
}

func (x *GetBlockInfoResponse) GetBlockNumber() int32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *GetBlockInfoResponse) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *GetBlockInfoResponse) GetInfo() *Block {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetBlockValidatorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   int32                  `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ChainId       int32                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockValidatorsRequest) Reset() {
	*x = GetBlockValidatorsRequest{}
	mi := &file_blocks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockValidatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockValidatorsRequest) ProtoMessage() {}

func (x *GetBlockValidatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockValidatorsRequest.ProtoReflect.Descriptor instead.
func (*GetBlockValidatorsRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{3}
}

func (x *GetBlockValidatorsRequest) GetBlockNumber() int32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *GetBlockValidatorsRequest) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type GetBlockValidatorsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber    int32                  `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ChainId        int32                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ValidatorsList []string               `protobuf:"bytes,3,rep,name=validators_list,json=validatorsList,proto3" json:"validators_list,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetBlockValidatorsResponse) Reset() {
	*x = GetBlockValidatorsResponse{}
	mi := &file_blocks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockValidatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockValidatorsResponse) ProtoMessage() {}

func (x *GetBlockValidatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockValidatorsResponse.ProtoReflect.Descriptor instead.
func (*GetBlockValidatorsResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlockValidatorsResponse) GetBlockNumber() int32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *GetBlockValidatorsResponse) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *GetBlockValidatorsResponse) GetValidatorsList() []string {
	if x != nil {
		return x.ValidatorsList
	}
	return nil
}

type TxByDay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxNum         int32                  `protobuf:"varint,1,opt,name=tx_num,json=txNum,proto3" json:"tx_num,omitempty"`
	Day           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxByDay) Reset() {
	*x = TxByDay{}
	mi := &file_blocks_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxByDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxByDay) ProtoMessage() {}

func (x *TxByDay) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxByDay.ProtoReflect.Descriptor instead.
func (*TxByDay) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{5}
}

func (x *TxByDay) GetTxNum() int32 {
	if x != nil {
		return x.TxNum
	}
	return 0
}

func (x *TxByDay) GetDay() *timestamppb.Timestamp {
	if x != nil {
		return x.Day
	}
	return nil
}

type TxChartByDayRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxChartByDayRequest) Reset() {
	*x = TxChartByDayRequest{}
	mi := &file_blocks_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxChartByDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxChartByDayRequest) ProtoMessage() {}

func (x *TxChartByDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxChartByDayRequest.ProtoReflect.Descriptor instead.
func (*TxChartByDayRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{6}
}

func (x *TxChartByDayRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TxChartByDayRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type TxChartByDayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxByDay       []*TxByDay             `protobuf:"bytes,1,rep,name=tx_by_day,json=txByDay,proto3" json:"tx_by_day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxChartByDayResponse) Reset() {
	*x = TxChartByDayResponse{}
	mi := &file_blocks_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxChartByDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxChartByDayResponse) ProtoMessage() {}

func (x *TxChartByDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxChartByDayResponse.ProtoReflect.Descriptor instead.
func (*TxChartByDayResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{7}
}

func (x *TxChartByDayResponse) GetTxByDay() []*TxByDay {
	if x != nil {
		return x.TxByDay
	}
	return nil
}

type TxByHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxByHashRequest) Reset() {
	*x = TxByHashRequest{}
	mi := &file_blocks_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxByHashRequest) ProtoMessage() {}

func (x *TxByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxByHashRequest.ProtoReflect.Descriptor instead.
func (*TxByHashRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{8}
}

func (x *TxByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type TxByHashResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            *TxByHash              `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxByHashResponse) Reset() {
	*x = TxByHashResponse{}
	mi := &file_blocks_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxByHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxByHashResponse) ProtoMessage() {}

func (x *TxByHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxByHashResponse.ProtoReflect.Descriptor instead.
func (*TxByHashResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{9}
}

func (x *TxByHashResponse) GetTx() *TxByHash {
	if x != nil {
		return x.Tx
	}
	return nil
}

type TxByHash struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Messages                    []string               `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Memo                        string                 `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
	TimeoutHeight               string                 `protobuf:"bytes,3,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	ExtensionOptions            []string               `protobuf:"bytes,4,rep,name=extension_options,json=extensionOptions,proto3" json:"extension_options,omitempty"`
	NonCriticalExtensionOptions []string               `protobuf:"bytes,5,rep,name=non_critical_extension_options,json=nonCriticalExtensionOptions,proto3" json:"non_critical_extension_options,omitempty"`
	AuthInfo                    *TxAuthInfo            `protobuf:"bytes,6,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
	TxResponse                  *TxResponse            `protobuf:"bytes,7,opt,name=tx_response,json=txResponse,proto3" json:"tx_response,omitempty"`
	Block                       *Block                 `protobuf:"bytes,8,opt,name=block,proto3" json:"block,omitempty"`
	Fees                        []*Fee                 `protobuf:"bytes,9,rep,name=fees,proto3" json:"fees,omitempty"`
	SenderReceiver              *TxSenderReceiver      `protobuf:"bytes,10,opt,name=sender_receiver,json=senderReceiver,proto3,oneof" json:"sender_receiver,omitempty"`
	Events                      []*TxEvent             `protobuf:"bytes,11,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *TxByHash) Reset() {
	*x = TxByHash{}
	mi := &file_blocks_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxByHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxByHash) ProtoMessage() {}

func (x *TxByHash) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxByHash.ProtoReflect.Descriptor instead.
func (*TxByHash) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{10}
}

func (x *TxByHash) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *TxByHash) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TxByHash) GetTimeoutHeight() string {
	if x != nil {
		return x.TimeoutHeight
	}
	return ""
}

func (x *TxByHash) GetExtensionOptions() []string {
	if x != nil {
		return x.ExtensionOptions
	}
	return nil
}

func (x *TxByHash) GetNonCriticalExtensionOptions() []string {
	if x != nil {
		return x.NonCriticalExtensionOptions
	}
	return nil
}

func (x *TxByHash) GetAuthInfo() *TxAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *TxByHash) GetTxResponse() *TxResponse {
	if x != nil {
		return x.TxResponse
	}
	return nil
}

func (x *TxByHash) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *TxByHash) GetFees() []*Fee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *TxByHash) GetSenderReceiver() *TxSenderReceiver {
	if x != nil {
		return x.SenderReceiver
	}
	return nil
}

func (x *TxByHash) GetEvents() []*TxEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type TxSenderReceiver struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageType   string                 `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Sender        string                 `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver      string                 `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Amount        string                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom         string                 `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxSenderReceiver) Reset() {
	*x = TxSenderReceiver{}
	mi := &file_blocks_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxSenderReceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxSenderReceiver) ProtoMessage() {}

func (x *TxSenderReceiver) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxSenderReceiver.ProtoReflect.Descriptor instead.
func (*TxSenderReceiver) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{11}
}

func (x *TxSenderReceiver) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *TxSenderReceiver) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *TxSenderReceiver) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *TxSenderReceiver) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TxSenderReceiver) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

type TxEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageType   string                 `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	EventIndex    int32                  `protobuf:"varint,2,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Index         int32                  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	Value         string                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Key           string                 `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxEvent) Reset() {
	*x = TxEvent{}
	mi := &file_blocks_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxEvent) ProtoMessage() {}

func (x *TxEvent) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxEvent.ProtoReflect.Descriptor instead.
func (*TxEvent) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{12}
}

func (x *TxEvent) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *TxEvent) GetEventIndex() int32 {
	if x != nil {
		return x.EventIndex
	}
	return 0
}

func (x *TxEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TxEvent) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TxEvent) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TxEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Fee struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        string                 `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom         string                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Payer         string                 `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fee) Reset() {
	*x = Fee{}
	mi := &file_blocks_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{13}
}

func (x *Fee) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Fee) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Fee) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

type TxAuthInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     []string               `protobuf:"bytes,1,rep,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Fee           *TxFee                 `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Signatures    [][]byte               `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Tip           *TxTip                 `protobuf:"bytes,4,opt,name=tip,proto3" json:"tip,omitempty"`
	SignerInfos   []*SignerInfo          `protobuf:"bytes,5,rep,name=signer_infos,json=signerInfos,proto3" json:"signer_infos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxAuthInfo) Reset() {
	*x = TxAuthInfo{}
	mi := &file_blocks_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAuthInfo) ProtoMessage() {}

func (x *TxAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAuthInfo.ProtoReflect.Descriptor instead.
func (*TxAuthInfo) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{14}
}

func (x *TxAuthInfo) GetPublicKey() []string {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *TxAuthInfo) GetFee() *TxFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *TxAuthInfo) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *TxAuthInfo) GetTip() *TxTip {
	if x != nil {
		return x.Tip
	}
	return nil
}

func (x *TxAuthInfo) GetSignerInfos() []*SignerInfo {
	if x != nil {
		return x.SignerInfos
	}
	return nil
}

type SignerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ModeInfo      string                 `protobuf:"bytes,2,opt,name=mode_info,json=modeInfo,proto3" json:"mode_info,omitempty"`
	Sequence      int64                  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignerInfo) Reset() {
	*x = SignerInfo{}
	mi := &file_blocks_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignerInfo) ProtoMessage() {}

func (x *SignerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignerInfo.ProtoReflect.Descriptor instead.
func (*SignerInfo) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{15}
}

func (x *SignerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SignerInfo) GetModeInfo() string {
	if x != nil {
		return x.ModeInfo
	}
	return ""
}

func (x *SignerInfo) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type TxFee struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        []*Denom               `protobuf:"bytes,1,rep,name=amount,proto3" json:"amount,omitempty"`
	GasLimit      string                 `protobuf:"bytes,2,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Payer         string                 `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	Granter       string                 `protobuf:"bytes,4,opt,name=granter,proto3" json:"granter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxFee) Reset() {
	*x = TxFee{}
	mi := &file_blocks_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxFee) ProtoMessage() {}

func (x *TxFee) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxFee.ProtoReflect.Descriptor instead.
func (*TxFee) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{16}
}

func (x *TxFee) GetAmount() []*Denom {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TxFee) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *TxFee) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *TxFee) GetGranter() string {
	if x != nil {
		return x.Granter
	}
	return ""
}

type TxTip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        []*Denom               `protobuf:"bytes,1,rep,name=amount,proto3" json:"amount,omitempty"`
	Tipper        string                 `protobuf:"bytes,2,opt,name=tipper,proto3" json:"tipper,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxTip) Reset() {
	*x = TxTip{}
	mi := &file_blocks_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTip) ProtoMessage() {}

func (x *TxTip) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTip.ProtoReflect.Descriptor instead.
func (*TxTip) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{17}
}

func (x *TxTip) GetAmount() []*Denom {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TxTip) GetTipper() string {
	if x != nil {
		return x.Tipper
	}
	return ""
}

type TxResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        string                 `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Txhash        string                 `protobuf:"bytes,2,opt,name=txhash,proto3" json:"txhash,omitempty"`
	Codespace     string                 `protobuf:"bytes,3,opt,name=codespace,proto3" json:"codespace,omitempty"`
	Code          int32                  `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Data          string                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	RawLog        string                 `protobuf:"bytes,6,opt,name=raw_log,json=rawLog,proto3" json:"raw_log,omitempty"`
	Logs          []*TxLog               `protobuf:"bytes,7,rep,name=logs,proto3" json:"logs,omitempty"`
	Info          string                 `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
	GasWanted     string                 `protobuf:"bytes,9,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed       string                 `protobuf:"bytes,10,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp     string                 `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	mi := &file_blocks_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{18}
}

func (x *TxResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *TxResponse) GetTxhash() string {
	if x != nil {
		return x.Txhash
	}
	return ""
}

func (x *TxResponse) GetCodespace() string {
	if x != nil {
		return x.Codespace
	}
	return ""
}

func (x *TxResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TxResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TxResponse) GetRawLog() string {
	if x != nil {
		return x.RawLog
	}
	return ""
}

func (x *TxResponse) GetLogs() []*TxLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TxResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *TxResponse) GetGasWanted() string {
	if x != nil {
		return x.GasWanted
	}
	return ""
}

func (x *TxResponse) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *TxResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type TxLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgIndex      int32                  `protobuf:"varint,1,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty"`
	Log           string                 `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxLog) Reset() {
	*x = TxLog{}
	mi := &file_blocks_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxLog) ProtoMessage() {}

func (x *TxLog) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxLog.ProtoReflect.Descriptor instead.
func (*TxLog) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{19}
}

func (x *TxLog) GetMsgIndex() int32 {
	if x != nil {
		return x.MsgIndex
	}
	return 0
}

func (x *TxLog) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type Denom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Denom         string                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount        string                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Denom) Reset() {
	*x = Denom{}
	mi := &file_blocks_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Denom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Denom) ProtoMessage() {}

func (x *Denom) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Denom.ProtoReflect.Descriptor instead.
func (*Denom) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{20}
}

func (x *Denom) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Denom) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type TotalTransactionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	To            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalTransactionsRequest) Reset() {
	*x = TotalTransactionsRequest{}
	mi := &file_blocks_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalTransactionsRequest) ProtoMessage() {}

func (x *TotalTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalTransactionsRequest.ProtoReflect.Descriptor instead.
func (*TotalTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{21}
}

func (x *TotalTransactionsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type TotalTransactionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         string                 `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Total24H      string                 `protobuf:"bytes,2,opt,name=total24h,proto3" json:"total24h,omitempty"`
	Total30D      string                 `protobuf:"bytes,3,opt,name=total30d,proto3" json:"total30d,omitempty"`
	Volume24H     string                 `protobuf:"bytes,4,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	Volume30D     string                 `protobuf:"bytes,5,opt,name=volume30d,proto3" json:"volume30d,omitempty"`
	Total48H      string                 `protobuf:"bytes,6,opt,name=total48h,proto3" json:"total48h,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalTransactionsResponse) Reset() {
	*x = TotalTransactionsResponse{}
	mi := &file_blocks_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalTransactionsResponse) ProtoMessage() {}

func (x *TotalTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalTransactionsResponse.ProtoReflect.Descriptor instead.
func (*TotalTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{22}
}

func (x *TotalTransactionsResponse) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *TotalTransactionsResponse) GetTotal24H() string {
	if x != nil {
		return x.Total24H
	}
	return ""
}

func (x *TotalTransactionsResponse) GetTotal30D() string {
	if x != nil {
		return x.Total30D
	}
	return ""
}

func (x *TotalTransactionsResponse) GetVolume24H() string {
	if x != nil {
		return x.Volume24H
	}
	return ""
}

func (x *TotalTransactionsResponse) GetVolume30D() string {
	if x != nil {
		return x.Volume30D
	}
	return ""
}

func (x *TotalTransactionsResponse) GetTotal48H() string {
	if x != nil {
		return x.Total48H
	}
	return ""
}

type Limit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int64                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Limit) Reset() {
	*x = Limit{}
	mi := &file_blocks_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limit) ProtoMessage() {}

func (x *Limit) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limit.ProtoReflect.Descriptor instead.
func (*Limit) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{23}
}

func (x *Limit) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Limit) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int64                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	All           int64                  `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_blocks_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{24}
}

func (x *Result) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Result) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Result) GetAll() int64 {
	if x != nil {
		return x.All
	}
	return 0
}

type TransactionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         *Limit                 `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsRequest) Reset() {
	*x = TransactionsRequest{}
	mi := &file_blocks_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsRequest) ProtoMessage() {}

func (x *TransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsRequest.ProtoReflect.Descriptor instead.
func (*TransactionsRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionsRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type TransactionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            []*TxByHash            `protobuf:"bytes,1,rep,name=tx,proto3" json:"tx,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsResponse) Reset() {
	*x = TransactionsResponse{}
	mi := &file_blocks_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsResponse) ProtoMessage() {}

func (x *TransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsResponse.ProtoReflect.Descriptor instead.
func (*TransactionsResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{26}
}

func (x *TransactionsResponse) GetTx() []*TxByHash {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TransactionsResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type TotalBlocksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	To            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalBlocksRequest) Reset() {
	*x = TotalBlocksRequest{}
	mi := &file_blocks_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalBlocksRequest) ProtoMessage() {}

func (x *TotalBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalBlocksRequest.ProtoReflect.Descriptor instead.
func (*TotalBlocksRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{27}
}

func (x *TotalBlocksRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type TotalBlocksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Count24H      int64                  `protobuf:"varint,2,opt,name=count24H,proto3" json:"count24H,omitempty"`
	Time          int64                  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	TotalFee24H   string                 `protobuf:"bytes,4,opt,name=totalFee24H,proto3" json:"totalFee24H,omitempty"`
	Count48H      int64                  `protobuf:"varint,5,opt,name=count48H,proto3" json:"count48H,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalBlocksResponse) Reset() {
	*x = TotalBlocksResponse{}
	mi := &file_blocks_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalBlocksResponse) ProtoMessage() {}

func (x *TotalBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalBlocksResponse.ProtoReflect.Descriptor instead.
func (*TotalBlocksResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{28}
}

func (x *TotalBlocksResponse) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TotalBlocksResponse) GetCount24H() int64 {
	if x != nil {
		return x.Count24H
	}
	return 0
}

func (x *TotalBlocksResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TotalBlocksResponse) GetTotalFee24H() string {
	if x != nil {
		return x.TotalFee24H
	}
	return ""
}

func (x *TotalBlocksResponse) GetCount48H() int64 {
	if x != nil {
		return x.Count48H
	}
	return 0
}

type GetBlocksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         *Limit                 `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksRequest) Reset() {
	*x = GetBlocksRequest{}
	mi := &file_blocks_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksRequest) ProtoMessage() {}

func (x *GetBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{29}
}

func (x *GetBlocksRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type GetBlocksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*Block               `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksResponse) Reset() {
	*x = GetBlocksResponse{}
	mi := &file_blocks_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksResponse) ProtoMessage() {}

func (x *GetBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetBlocksResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{30}
}

func (x *GetBlocksResponse) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *GetBlocksResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type BlockSignaturesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeight   int64                  `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Limit         *Limit                 `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ValAddress    []string               `protobuf:"bytes,3,rep,name=val_address,json=valAddress,proto3" json:"val_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockSignaturesRequest) Reset() {
	*x = BlockSignaturesRequest{}
	mi := &file_blocks_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockSignaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSignaturesRequest) ProtoMessage() {}

func (x *BlockSignaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSignaturesRequest.ProtoReflect.Descriptor instead.
func (*BlockSignaturesRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{31}
}

func (x *BlockSignaturesRequest) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockSignaturesRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *BlockSignaturesRequest) GetValAddress() []string {
	if x != nil {
		return x.ValAddress
	}
	return nil
}

type BlockSignaturesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signers       []*SignerAddress       `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockSignaturesResponse) Reset() {
	*x = BlockSignaturesResponse{}
	mi := &file_blocks_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockSignaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSignaturesResponse) ProtoMessage() {}

func (x *BlockSignaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSignaturesResponse.ProtoReflect.Descriptor instead.
func (*BlockSignaturesResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{32}
}

func (x *BlockSignaturesResponse) GetSigners() []*SignerAddress {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *BlockSignaturesResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type SignerAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Rank          int64                  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignerAddress) Reset() {
	*x = SignerAddress{}
	mi := &file_blocks_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignerAddress) ProtoMessage() {}

func (x *SignerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignerAddress.ProtoReflect.Descriptor instead.
func (*SignerAddress) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{33}
}

func (x *SignerAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SignerAddress) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SignerAddress) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type TxsByBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeight   int64                  `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Limit         *Limit                 `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxsByBlockRequest) Reset() {
	*x = TxsByBlockRequest{}
	mi := &file_blocks_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxsByBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsByBlockRequest) ProtoMessage() {}

func (x *TxsByBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsByBlockRequest.ProtoReflect.Descriptor instead.
func (*TxsByBlockRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{34}
}

func (x *TxsByBlockRequest) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *TxsByBlockRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type TxsByBlockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*TxByHash            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxsByBlockResponse) Reset() {
	*x = TxsByBlockResponse{}
	mi := &file_blocks_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxsByBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsByBlockResponse) ProtoMessage() {}

func (x *TxsByBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsByBlockResponse.ProtoReflect.Descriptor instead.
func (*TxsByBlockResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{35}
}

func (x *TxsByBlockResponse) GetData() []*TxByHash {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TxsByBlockResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type TransactionRawLogRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionRawLogRequest) Reset() {
	*x = TransactionRawLogRequest{}
	mi := &file_blocks_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionRawLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRawLogRequest) ProtoMessage() {}

func (x *TransactionRawLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRawLogRequest.ProtoReflect.Descriptor instead.
func (*TransactionRawLogRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{36}
}

func (x *TransactionRawLogRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type TransactionRawLogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawLog        []byte                 `protobuf:"bytes,1,opt,name=raw_log,json=rawLog,proto3" json:"raw_log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionRawLogResponse) Reset() {
	*x = TransactionRawLogResponse{}
	mi := &file_blocks_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionRawLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRawLogResponse) ProtoMessage() {}

func (x *TransactionRawLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRawLogResponse.ProtoReflect.Descriptor instead.
func (*TransactionRawLogResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{37}
}

func (x *TransactionRawLogResponse) GetRawLog() []byte {
	if x != nil {
		return x.RawLog
	}
	return nil
}

type TransactionSignersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionSignersRequest) Reset() {
	*x = TransactionSignersRequest{}
	mi := &file_blocks_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionSignersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSignersRequest) ProtoMessage() {}

func (x *TransactionSignersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSignersRequest.ProtoReflect.Descriptor instead.
func (*TransactionSignersRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{38}
}

func (x *TransactionSignersRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type TransactionSignersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signers       []*SignerInfo          `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionSignersResponse) Reset() {
	*x = TransactionSignersResponse{}
	mi := &file_blocks_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionSignersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSignersResponse) ProtoMessage() {}

func (x *TransactionSignersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSignersResponse.ProtoReflect.Descriptor instead.
func (*TransactionSignersResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{39}
}

func (x *TransactionSignersResponse) GetSigners() []*SignerInfo {
	if x != nil {
		return x.Signers
	}
	return nil
}

type CacheAggregatedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheAggregatedRequest) Reset() {
	*x = CacheAggregatedRequest{}
	mi := &file_blocks_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheAggregatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheAggregatedRequest) ProtoMessage() {}

func (x *CacheAggregatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheAggregatedRequest.ProtoReflect.Descriptor instead.
func (*CacheAggregatedRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{40}
}

type CacheAggregatedResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Transactions  *TotalTransactionsResponse `protobuf:"bytes,1,opt,name=transactions,proto3" json:"transactions,omitempty"`
	Blocks        *TotalBlocksResponse       `protobuf:"bytes,2,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Wallets       *TotalWallets              `protobuf:"bytes,3,opt,name=wallets,proto3" json:"wallets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheAggregatedResponse) Reset() {
	*x = CacheAggregatedResponse{}
	mi := &file_blocks_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheAggregatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheAggregatedResponse) ProtoMessage() {}

func (x *CacheAggregatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheAggregatedResponse.ProtoReflect.Descriptor instead.
func (*CacheAggregatedResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{41}
}

func (x *CacheAggregatedResponse) GetTransactions() *TotalTransactionsResponse {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *CacheAggregatedResponse) GetBlocks() *TotalBlocksResponse {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *CacheAggregatedResponse) GetWallets() *TotalWallets {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type TotalWallets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Count_24H     int64                  `protobuf:"varint,2,opt,name=count_24H,json=count24H,proto3" json:"count_24H,omitempty"`
	Count_48H     int64                  `protobuf:"varint,3,opt,name=count_48H,json=count48H,proto3" json:"count_48H,omitempty"`
	Count_30D     int64                  `protobuf:"varint,4,opt,name=count_30D,json=count30D,proto3" json:"count_30D,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalWallets) Reset() {
	*x = TotalWallets{}
	mi := &file_blocks_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalWallets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalWallets) ProtoMessage() {}

func (x *TotalWallets) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalWallets.ProtoReflect.Descriptor instead.
func (*TotalWallets) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{42}
}

func (x *TotalWallets) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TotalWallets) GetCount_24H() int64 {
	if x != nil {
		return x.Count_24H
	}
	return 0
}

func (x *TotalWallets) GetCount_48H() int64 {
	if x != nil {
		return x.Count_48H
	}
	return 0
}

func (x *TotalWallets) GetCount_30D() int64 {
	if x != nil {
		return x.Count_30D
	}
	return 0
}

type SearchResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	HashType      string                 `protobuf:"bytes,2,opt,name=hash_type,json=hashType,proto3" json:"hash_type,omitempty"`
	BlockHeight   string                 `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResults) Reset() {
	*x = SearchResults{}
	mi := &file_blocks_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResults) ProtoMessage() {}

func (x *SearchResults) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResults.ProtoReflect.Descriptor instead.
func (*SearchResults) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{43}
}

func (x *SearchResults) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SearchResults) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *SearchResults) GetBlockHeight() string {
	if x != nil {
		return x.BlockHeight
	}
	return ""
}

type SearchHashByTextRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchHashByTextRequest) Reset() {
	*x = SearchHashByTextRequest{}
	mi := &file_blocks_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchHashByTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHashByTextRequest) ProtoMessage() {}

func (x *SearchHashByTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHashByTextRequest.ProtoReflect.Descriptor instead.
func (*SearchHashByTextRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{44}
}

func (x *SearchHashByTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SearchHashByTextResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*SearchResults       `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchHashByTextResponse) Reset() {
	*x = SearchHashByTextResponse{}
	mi := &file_blocks_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchHashByTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHashByTextResponse) ProtoMessage() {}

func (x *SearchHashByTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHashByTextResponse.ProtoReflect.Descriptor instead.
func (*SearchHashByTextResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{45}
}

func (x *SearchHashByTextResponse) GetResults() []*SearchResults {
	if x != nil {
		return x.Results
	}
	return nil
}

type BlockInfoByHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockInfoByHashRequest) Reset() {
	*x = BlockInfoByHashRequest{}
	mi := &file_blocks_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockInfoByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfoByHashRequest) ProtoMessage() {}

func (x *BlockInfoByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfoByHashRequest.ProtoReflect.Descriptor instead.
func (*BlockInfoByHashRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{46}
}

func (x *BlockInfoByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type BlockInfoByHashResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *Block                 `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockInfoByHashResponse) Reset() {
	*x = BlockInfoByHashResponse{}
	mi := &file_blocks_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockInfoByHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfoByHashResponse) ProtoMessage() {}

func (x *BlockInfoByHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfoByHashResponse.ProtoReflect.Descriptor instead.
func (*BlockInfoByHashResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{47}
}

func (x *BlockInfoByHashResponse) GetInfo() *Block {
	if x != nil {
		return x.Info
	}
	return nil
}

type ChartTransactionsByHourRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	To            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChartTransactionsByHourRequest) Reset() {
	*x = ChartTransactionsByHourRequest{}
	mi := &file_blocks_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartTransactionsByHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartTransactionsByHourRequest) ProtoMessage() {}

func (x *ChartTransactionsByHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartTransactionsByHourRequest.ProtoReflect.Descriptor instead.
func (*ChartTransactionsByHourRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{48}
}

func (x *ChartTransactionsByHourRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type TxsByHour struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxNum         int64                  `protobuf:"varint,1,opt,name=tx_num,json=txNum,proto3" json:"tx_num,omitempty"`
	Hour          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=hour,proto3" json:"hour,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxsByHour) Reset() {
	*x = TxsByHour{}
	mi := &file_blocks_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxsByHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsByHour) ProtoMessage() {}

func (x *TxsByHour) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsByHour.ProtoReflect.Descriptor instead.
func (*TxsByHour) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{49}
}

func (x *TxsByHour) GetTxNum() int64 {
	if x != nil {
		return x.TxNum
	}
	return 0
}

func (x *TxsByHour) GetHour() *timestamppb.Timestamp {
	if x != nil {
		return x.Hour
	}
	return nil
}

type ChartTransactionsByHourResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Points        []*TxsByHour           `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	Total_24H     int64                  `protobuf:"varint,2,opt,name=total_24H,json=total24H,proto3" json:"total_24H,omitempty"`
	Total_48H     int64                  `protobuf:"varint,3,opt,name=total_48H,json=total48H,proto3" json:"total_48H,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChartTransactionsByHourResponse) Reset() {
	*x = ChartTransactionsByHourResponse{}
	mi := &file_blocks_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartTransactionsByHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartTransactionsByHourResponse) ProtoMessage() {}

func (x *ChartTransactionsByHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartTransactionsByHourResponse.ProtoReflect.Descriptor instead.
func (*ChartTransactionsByHourResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{50}
}

func (x *ChartTransactionsByHourResponse) GetPoints() []*TxsByHour {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *ChartTransactionsByHourResponse) GetTotal_24H() int64 {
	if x != nil {
		return x.Total_24H
	}
	return 0
}

func (x *ChartTransactionsByHourResponse) GetTotal_48H() int64 {
	if x != nil {
		return x.Total_48H
	}
	return 0
}

type ChartTransactionsVolumeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	To            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChartTransactionsVolumeRequest) Reset() {
	*x = ChartTransactionsVolumeRequest{}
	mi := &file_blocks_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartTransactionsVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartTransactionsVolumeRequest) ProtoMessage() {}

func (x *ChartTransactionsVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartTransactionsVolumeRequest.ProtoReflect.Descriptor instead.
func (*ChartTransactionsVolumeRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{51}
}

func (x *ChartTransactionsVolumeRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type TxsVolumeByHour struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxVolume      string                 `protobuf:"bytes,1,opt,name=tx_volume,json=txVolume,proto3" json:"tx_volume,omitempty"`
	Hour          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=hour,proto3" json:"hour,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxsVolumeByHour) Reset() {
	*x = TxsVolumeByHour{}
	mi := &file_blocks_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxsVolumeByHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsVolumeByHour) ProtoMessage() {}

func (x *TxsVolumeByHour) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsVolumeByHour.ProtoReflect.Descriptor instead.
func (*TxsVolumeByHour) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{52}
}

func (x *TxsVolumeByHour) GetTxVolume() string {
	if x != nil {
		return x.TxVolume
	}
	return ""
}

func (x *TxsVolumeByHour) GetHour() *timestamppb.Timestamp {
	if x != nil {
		return x.Hour
	}
	return nil
}

type ChartTransactionsVolumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Points        []*TxsVolumeByHour     `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChartTransactionsVolumeResponse) Reset() {
	*x = ChartTransactionsVolumeResponse{}
	mi := &file_blocks_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartTransactionsVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartTransactionsVolumeResponse) ProtoMessage() {}

func (x *ChartTransactionsVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartTransactionsVolumeResponse.ProtoReflect.Descriptor instead.
func (*ChartTransactionsVolumeResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{53}
}

func (x *ChartTransactionsVolumeResponse) GetPoints() []*TxsVolumeByHour {
	if x != nil {
		return x.Points
	}
	return nil
}

type BlockUpTimeRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BlockWindow      int64                  `protobuf:"varint,1,opt,name=block_window,json=blockWindow,proto3" json:"block_window,omitempty"`
	BlockHeight      int64                  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ValidatorAddress string                 `protobuf:"bytes,3,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BlockUpTimeRequest) Reset() {
	*x = BlockUpTimeRequest{}
	mi := &file_blocks_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUpTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUpTimeRequest) ProtoMessage() {}

func (x *BlockUpTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUpTimeRequest.ProtoReflect.Descriptor instead.
func (*BlockUpTimeRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{54}
}

func (x *BlockUpTimeRequest) GetBlockWindow() int64 {
	if x != nil {
		return x.BlockWindow
	}
	return 0
}

func (x *BlockUpTimeRequest) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockUpTimeRequest) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

type BlockUpTimeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uptime        string                 `protobuf:"bytes,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUpTimeResponse) Reset() {
	*x = BlockUpTimeResponse{}
	mi := &file_blocks_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUpTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUpTimeResponse) ProtoMessage() {}

func (x *BlockUpTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUpTimeResponse.ProtoReflect.Descriptor instead.
func (*BlockUpTimeResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{55}
}

func (x *BlockUpTimeResponse) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

type UptimeByBlocksRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BlockWindow      int64                  `protobuf:"varint,1,opt,name=block_window,json=blockWindow,proto3" json:"block_window,omitempty"`
	BlockHeight      int64                  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ValidatorAddress string                 `protobuf:"bytes,3,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UptimeByBlocksRequest) Reset() {
	*x = UptimeByBlocksRequest{}
	mi := &file_blocks_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UptimeByBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeByBlocksRequest) ProtoMessage() {}

func (x *UptimeByBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeByBlocksRequest.ProtoReflect.Descriptor instead.
func (*UptimeByBlocksRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{56}
}

func (x *UptimeByBlocksRequest) GetBlockWindow() int64 {
	if x != nil {
		return x.BlockWindow
	}
	return 0
}

func (x *UptimeByBlocksRequest) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *UptimeByBlocksRequest) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

type BlockSigned struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeight   int64                  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Signed        bool                   `protobuf:"varint,2,opt,name=signed,proto3" json:"signed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockSigned) Reset() {
	*x = BlockSigned{}
	mi := &file_blocks_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSigned) ProtoMessage() {}

func (x *BlockSigned) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSigned.ProtoReflect.Descriptor instead.
func (*BlockSigned) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{57}
}

func (x *BlockSigned) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockSigned) GetSigned() bool {
	if x != nil {
		return x.Signed
	}
	return false
}

type UptimeByBlocksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*BlockSigned         `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Uptime        float32                `protobuf:"fixed32,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UptimeByBlocksResponse) Reset() {
	*x = UptimeByBlocksResponse{}
	mi := &file_blocks_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UptimeByBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeByBlocksResponse) ProtoMessage() {}

func (x *UptimeByBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeByBlocksResponse.ProtoReflect.Descriptor instead.
func (*UptimeByBlocksResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{58}
}

func (x *UptimeByBlocksResponse) GetBlocks() []*BlockSigned {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *UptimeByBlocksResponse) GetUptime() float32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

type VotesTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHeight   int64                  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	TxHash        string                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ProposalId    int32                  `protobuf:"varint,4,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Voter         string                 `protobuf:"bytes,5,opt,name=voter,proto3" json:"voter,omitempty"`
	Option        string                 `protobuf:"bytes,6,opt,name=option,proto3" json:"option,omitempty"`
	Weight        string                 `protobuf:"bytes,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Tx            *TxByHash              `protobuf:"bytes,8,opt,name=tx,proto3" json:"tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VotesTransaction) Reset() {
	*x = VotesTransaction{}
	mi := &file_blocks_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VotesTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotesTransaction) ProtoMessage() {}

func (x *VotesTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotesTransaction.ProtoReflect.Descriptor instead.
func (*VotesTransaction) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{59}
}

func (x *VotesTransaction) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *VotesTransaction) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *VotesTransaction) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *VotesTransaction) GetProposalId() int32 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

func (x *VotesTransaction) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *VotesTransaction) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

func (x *VotesTransaction) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *VotesTransaction) GetTx() *TxByHash {
	if x != nil {
		return x.Tx
	}
	return nil
}

type GetVotesRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ValidatorAccountAddress string                 `protobuf:"bytes,1,opt,name=validator_account_address,json=validatorAccountAddress,proto3" json:"validator_account_address,omitempty"`
	UniqueProposals         bool                   `protobuf:"varint,2,opt,name=unique_proposals,json=uniqueProposals,proto3" json:"unique_proposals,omitempty"`
	Limit                   *Limit                 `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetVotesRequest) Reset() {
	*x = GetVotesRequest{}
	mi := &file_blocks_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesRequest) ProtoMessage() {}

func (x *GetVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesRequest.ProtoReflect.Descriptor instead.
func (*GetVotesRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{60}
}

func (x *GetVotesRequest) GetValidatorAccountAddress() string {
	if x != nil {
		return x.ValidatorAccountAddress
	}
	return ""
}

func (x *GetVotesRequest) GetUniqueProposals() bool {
	if x != nil {
		return x.UniqueProposals
	}
	return false
}

func (x *GetVotesRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type GetVotesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transactions  []*VotesTransaction    `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVotesResponse) Reset() {
	*x = GetVotesResponse{}
	mi := &file_blocks_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesResponse) ProtoMessage() {}

func (x *GetVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesResponse.ProtoReflect.Descriptor instead.
func (*GetVotesResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{61}
}

func (x *GetVotesResponse) GetTransactions() []*VotesTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *GetVotesResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetPowerEventsRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ValidatorAccountAddress string                 `protobuf:"bytes,1,opt,name=validator_account_address,json=validatorAccountAddress,proto3" json:"validator_account_address,omitempty"`
	Limit                   *Limit                 `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetPowerEventsRequest) Reset() {
	*x = GetPowerEventsRequest{}
	mi := &file_blocks_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPowerEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerEventsRequest) ProtoMessage() {}

func (x *GetPowerEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerEventsRequest.ProtoReflect.Descriptor instead.
func (*GetPowerEventsRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{62}
}

func (x *GetPowerEventsRequest) GetValidatorAccountAddress() string {
	if x != nil {
		return x.ValidatorAccountAddress
	}
	return ""
}

func (x *GetPowerEventsRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type GetPowerEventsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*TxByHash            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPowerEventsResponse) Reset() {
	*x = GetPowerEventsResponse{}
	mi := &file_blocks_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPowerEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerEventsResponse) ProtoMessage() {}

func (x *GetPowerEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerEventsResponse.ProtoReflect.Descriptor instead.
func (*GetPowerEventsResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{63}
}

func (x *GetPowerEventsResponse) GetData() []*TxByHash {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPowerEventsResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetValidatorHistoryEventsRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ValidatorAccountAddress string                 `protobuf:"bytes,1,opt,name=validator_account_address,json=validatorAccountAddress,proto3" json:"validator_account_address,omitempty"`
	Limit                   *Limit                 `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetValidatorHistoryEventsRequest) Reset() {
	*x = GetValidatorHistoryEventsRequest{}
	mi := &file_blocks_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidatorHistoryEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorHistoryEventsRequest) ProtoMessage() {}

func (x *GetValidatorHistoryEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorHistoryEventsRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorHistoryEventsRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{64}
}

func (x *GetValidatorHistoryEventsRequest) GetValidatorAccountAddress() string {
	if x != nil {
		return x.ValidatorAccountAddress
	}
	return ""
}

func (x *GetValidatorHistoryEventsRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type GetValidatorHistoryEventsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*TxByHash            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidatorHistoryEventsResponse) Reset() {
	*x = GetValidatorHistoryEventsResponse{}
	mi := &file_blocks_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidatorHistoryEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorHistoryEventsResponse) ProtoMessage() {}

func (x *GetValidatorHistoryEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorHistoryEventsResponse.ProtoReflect.Descriptor instead.
func (*GetValidatorHistoryEventsResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{65}
}

func (x *GetValidatorHistoryEventsResponse) GetData() []*TxByHash {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetValidatorHistoryEventsResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type TransactionsByEventValueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Type          []string               `protobuf:"bytes,2,rep,name=type,proto3" json:"type,omitempty"`
	Limit         *Limit                 `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsByEventValueRequest) Reset() {
	*x = TransactionsByEventValueRequest{}
	mi := &file_blocks_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsByEventValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsByEventValueRequest) ProtoMessage() {}

func (x *TransactionsByEventValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsByEventValueRequest.ProtoReflect.Descriptor instead.
func (*TransactionsByEventValueRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{66}
}

func (x *TransactionsByEventValueRequest) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TransactionsByEventValueRequest) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TransactionsByEventValueRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type TransactionsByEventValueResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*TxByHash            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsByEventValueResponse) Reset() {
	*x = TransactionsByEventValueResponse{}
	mi := &file_blocks_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsByEventValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsByEventValueResponse) ProtoMessage() {}

func (x *TransactionsByEventValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsByEventValueResponse.ProtoReflect.Descriptor instead.
func (*TransactionsByEventValueResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{67}
}

func (x *TransactionsByEventValueResponse) GetData() []*TxByHash {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionsByEventValueResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetVotesByAccountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accounts      []string               `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Exclude       bool                   `protobuf:"varint,2,opt,name=exclude,proto3" json:"exclude,omitempty"`
	VoteType      string                 `protobuf:"bytes,3,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	ProposalID    int32                  `protobuf:"varint,4,opt,name=proposalID,proto3" json:"proposalID,omitempty"`
	UniqueVotes   bool                   `protobuf:"varint,5,opt,name=unique_votes,json=uniqueVotes,proto3" json:"unique_votes,omitempty"`
	Limit         *Limit                 `protobuf:"bytes,6,opt,name=limit,proto3" json:"limit,omitempty"`
	AccountAddr   *string                `protobuf:"bytes,7,opt,name=account_addr,json=accountAddr,proto3,oneof" json:"account_addr,omitempty"`
	Sort          *SortBy                `protobuf:"bytes,8,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVotesByAccountsRequest) Reset() {
	*x = GetVotesByAccountsRequest{}
	mi := &file_blocks_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVotesByAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesByAccountsRequest) ProtoMessage() {}

func (x *GetVotesByAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesByAccountsRequest.ProtoReflect.Descriptor instead.
func (*GetVotesByAccountsRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{68}
}

func (x *GetVotesByAccountsRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *GetVotesByAccountsRequest) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

func (x *GetVotesByAccountsRequest) GetVoteType() string {
	if x != nil {
		return x.VoteType
	}
	return ""
}

func (x *GetVotesByAccountsRequest) GetProposalID() int32 {
	if x != nil {
		return x.ProposalID
	}
	return 0
}

func (x *GetVotesByAccountsRequest) GetUniqueVotes() bool {
	if x != nil {
		return x.UniqueVotes
	}
	return false
}

func (x *GetVotesByAccountsRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *GetVotesByAccountsRequest) GetAccountAddr() string {
	if x != nil && x.AccountAddr != nil {
		return *x.AccountAddr
	}
	return ""
}

func (x *GetVotesByAccountsRequest) GetSort() *SortBy {
	if x != nil {
		return x.Sort
	}
	return nil
}

type GetVotesByAccountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*VotesTransaction    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVotesByAccountsResponse) Reset() {
	*x = GetVotesByAccountsResponse{}
	mi := &file_blocks_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVotesByAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesByAccountsResponse) ProtoMessage() {}

func (x *GetVotesByAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesByAccountsResponse.ProtoReflect.Descriptor instead.
func (*GetVotesByAccountsResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{69}
}

func (x *GetVotesByAccountsResponse) GetData() []*VotesTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetVotesByAccountsResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetWalletsCountPerPeriodRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWalletsCountPerPeriodRequest) Reset() {
	*x = GetWalletsCountPerPeriodRequest{}
	mi := &file_blocks_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletsCountPerPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletsCountPerPeriodRequest) ProtoMessage() {}

func (x *GetWalletsCountPerPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletsCountPerPeriodRequest.ProtoReflect.Descriptor instead.
func (*GetWalletsCountPerPeriodRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{70}
}

func (x *GetWalletsCountPerPeriodRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetWalletsCountPerPeriodRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type GetWalletsCountPerPeriodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        int64                  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWalletsCountPerPeriodResponse) Reset() {
	*x = GetWalletsCountPerPeriodResponse{}
	mi := &file_blocks_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletsCountPerPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletsCountPerPeriodResponse) ProtoMessage() {}

func (x *GetWalletsCountPerPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletsCountPerPeriodResponse.ProtoReflect.Descriptor instead.
func (*GetWalletsCountPerPeriodResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{71}
}

func (x *GetWalletsCountPerPeriodResponse) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GetWalletsWithTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         *Limit                 `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWalletsWithTxRequest) Reset() {
	*x = GetWalletsWithTxRequest{}
	mi := &file_blocks_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletsWithTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletsWithTxRequest) ProtoMessage() {}

func (x *GetWalletsWithTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletsWithTxRequest.ProtoReflect.Descriptor instead.
func (*GetWalletsWithTxRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{72}
}

func (x *GetWalletsWithTxRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type GetWalletsWithTxResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*WalletWithTxs       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWalletsWithTxResponse) Reset() {
	*x = GetWalletsWithTxResponse{}
	mi := &file_blocks_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletsWithTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletsWithTxResponse) ProtoMessage() {}

func (x *GetWalletsWithTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletsWithTxResponse.ProtoReflect.Descriptor instead.
func (*GetWalletsWithTxResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{73}
}

func (x *GetWalletsWithTxResponse) GetData() []*WalletWithTxs {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetWalletsWithTxResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type WalletWithTxs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	TxCount       int64                  `protobuf:"varint,2,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletWithTxs) Reset() {
	*x = WalletWithTxs{}
	mi := &file_blocks_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletWithTxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletWithTxs) ProtoMessage() {}

func (x *WalletWithTxs) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletWithTxs.ProtoReflect.Descriptor instead.
func (*WalletWithTxs) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{74}
}

func (x *WalletWithTxs) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *WalletWithTxs) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

type TxCountByAccountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accounts      []string               `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxCountByAccountsRequest) Reset() {
	*x = TxCountByAccountsRequest{}
	mi := &file_blocks_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxCountByAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxCountByAccountsRequest) ProtoMessage() {}

func (x *TxCountByAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxCountByAccountsRequest.ProtoReflect.Descriptor instead.
func (*TxCountByAccountsRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{75}
}

func (x *TxCountByAccountsRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type TxCountByAccountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*WalletWithTxs       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxCountByAccountsResponse) Reset() {
	*x = TxCountByAccountsResponse{}
	mi := &file_blocks_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxCountByAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxCountByAccountsResponse) ProtoMessage() {}

func (x *TxCountByAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxCountByAccountsResponse.ProtoReflect.Descriptor instead.
func (*TxCountByAccountsResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{76}
}

func (x *TxCountByAccountsResponse) GetData() []*WalletWithTxs {
	if x != nil {
		return x.Data
	}
	return nil
}

type AccountInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountInfoRequest) Reset() {
	*x = AccountInfoRequest{}
	mi := &file_blocks_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfoRequest) ProtoMessage() {}

func (x *AccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfoRequest.ProtoReflect.Descriptor instead.
func (*AccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{77}
}

func (x *AccountInfoRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type AccountInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxCount       int64                  `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	FirstTxTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=first_tx_time,json=firstTxTime,proto3" json:"first_tx_time,omitempty"`
	TotalSpent    *Denom                 `protobuf:"bytes,3,opt,name=total_spent,json=totalSpent,proto3" json:"total_spent,omitempty"`
	TotalReceived *Denom                 `protobuf:"bytes,4,opt,name=total_received,json=totalReceived,proto3" json:"total_received,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountInfoResponse) Reset() {
	*x = AccountInfoResponse{}
	mi := &file_blocks_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfoResponse) ProtoMessage() {}

func (x *AccountInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfoResponse.ProtoReflect.Descriptor instead.
func (*AccountInfoResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{78}
}

func (x *AccountInfoResponse) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *AccountInfoResponse) GetFirstTxTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTxTime
	}
	return nil
}

func (x *AccountInfoResponse) GetTotalSpent() *Denom {
	if x != nil {
		return x.TotalSpent
	}
	return nil
}

func (x *AccountInfoResponse) GetTotalReceived() *Denom {
	if x != nil {
		return x.TotalReceived
	}
	return nil
}

type DelegatesByValidatorRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	From           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	ValoperAddress string                 `protobuf:"bytes,3,opt,name=valoperAddress,proto3" json:"valoperAddress,omitempty"`
	Limit          *Limit                 `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DelegatesByValidatorRequest) Reset() {
	*x = DelegatesByValidatorRequest{}
	mi := &file_blocks_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelegatesByValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatesByValidatorRequest) ProtoMessage() {}

func (x *DelegatesByValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatesByValidatorRequest.ProtoReflect.Descriptor instead.
func (*DelegatesByValidatorRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{79}
}

func (x *DelegatesByValidatorRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *DelegatesByValidatorRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *DelegatesByValidatorRequest) GetValoperAddress() string {
	if x != nil {
		return x.ValoperAddress
	}
	return ""
}

func (x *DelegatesByValidatorRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

type DelegatesByValidatorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalSum      *Denom                 `protobuf:"bytes,1,opt,name=totalSum,proto3" json:"totalSum,omitempty"`
	Tx            []*TxByHash            `protobuf:"bytes,2,rep,name=tx,proto3" json:"tx,omitempty"`
	Result        *Result                `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelegatesByValidatorResponse) Reset() {
	*x = DelegatesByValidatorResponse{}
	mi := &file_blocks_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelegatesByValidatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatesByValidatorResponse) ProtoMessage() {}

func (x *DelegatesByValidatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatesByValidatorResponse.ProtoReflect.Descriptor instead.
func (*DelegatesByValidatorResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{80}
}

func (x *DelegatesByValidatorResponse) GetTotalSum() *Denom {
	if x != nil {
		return x.TotalSum
	}
	return nil
}

func (x *DelegatesByValidatorResponse) GetTx() []*TxByHash {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *DelegatesByValidatorResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type SortBy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SortBy        string                 `protobuf:"bytes,1,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	Direction     string                 `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortBy) Reset() {
	*x = SortBy{}
	mi := &file_blocks_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortBy) ProtoMessage() {}

func (x *SortBy) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortBy.ProtoReflect.Descriptor instead.
func (*SortBy) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{81}
}

func (x *SortBy) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *SortBy) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type ProposalDeposit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Amount        *Denom                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Address       string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProposalDeposit) Reset() {
	*x = ProposalDeposit{}
	mi := &file_blocks_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposalDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalDeposit) ProtoMessage() {}

func (x *ProposalDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalDeposit.ProtoReflect.Descriptor instead.
func (*ProposalDeposit) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{82}
}

func (x *ProposalDeposit) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *ProposalDeposit) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ProposalDeposit) GetAmount() *Denom {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ProposalDeposit) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ProposalDepositorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProposalId    int32                  `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Limit         *Limit                 `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Sort          *SortBy                `protobuf:"bytes,3,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProposalDepositorsRequest) Reset() {
	*x = ProposalDepositorsRequest{}
	mi := &file_blocks_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposalDepositorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalDepositorsRequest) ProtoMessage() {}

func (x *ProposalDepositorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalDepositorsRequest.ProtoReflect.Descriptor instead.
func (*ProposalDepositorsRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{83}
}

func (x *ProposalDepositorsRequest) GetProposalId() int32 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

func (x *ProposalDepositorsRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ProposalDepositorsRequest) GetSort() *SortBy {
	if x != nil {
		return x.Sort
	}
	return nil
}

type ProposalDepositorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*ProposalDeposit     `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProposalDepositorsResponse) Reset() {
	*x = ProposalDepositorsResponse{}
	mi := &file_blocks_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposalDepositorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalDepositorsResponse) ProtoMessage() {}

func (x *ProposalDepositorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalDepositorsResponse.ProtoReflect.Descriptor instead.
func (*ProposalDepositorsResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{84}
}

func (x *ProposalDepositorsResponse) GetData() []*ProposalDeposit {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProposalDepositorsResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type RewardByAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardByAccountRequest) Reset() {
	*x = RewardByAccountRequest{}
	mi := &file_blocks_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardByAccountRequest) ProtoMessage() {}

func (x *RewardByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardByAccountRequest.ProtoReflect.Descriptor instead.
func (*RewardByAccountRequest) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{85}
}

func (x *RewardByAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type RewardByAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        []*Denom               `protobuf:"bytes,1,rep,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardByAccountResponse) Reset() {
	*x = RewardByAccountResponse{}
	mi := &file_blocks_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardByAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardByAccountResponse) ProtoMessage() {}

func (x *RewardByAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blocks_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardByAccountResponse.ProtoReflect.Descriptor instead.
func (*RewardByAccountResponse) Descriptor() ([]byte, []int) {
	return file_blocks_proto_rawDescGZIP(), []int{86}
}

func (x *RewardByAccountResponse) GetAmount() []*Denom {
	if x != nil {
		return x.Amount
	}
	return nil
}

var File_blocks_proto protoreflect.FileDescriptor

var file_blocks_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x77, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x73, 0x57,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x07, 0x54, 0x78, 0x42,
	0x79, 0x44, 0x61, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x71, 0x0a, 0x13, 0x54, 0x78, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x14,
	0x54, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x54, 0x78, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x07, 0x74, 0x78, 0x42, 0x79, 0x44, 0x61,
	0x79, 0x22, 0x25, 0x0a, 0x0f, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x34, 0x0a, 0x10, 0x54, 0x78, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x02, 0x74, 0x78, 0x22, 0x84,
	0x04, 0x0a, 0x08, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x43, 0x0a, 0x1e, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x6e, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x54, 0x78, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x74, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1f, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x54, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x54, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x54, 0x78, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22,
	0x9f, 0x01, 0x0a, 0x07, 0x54, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x49, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a,
	0x0a, 0x54, 0x78, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x74,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x54, 0x78, 0x54, 0x69, 0x70, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x0c,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x5f, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x7b, 0x0a, 0x05, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x72, 0x22, 0x46, 0x0a, 0x05, 0x54, 0x78, 0x54, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x70, 0x70, 0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x0a, 0x54, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x61, 0x77, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54,
	0x78, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x73, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x36, 0x0a, 0x05, 0x54, 0x78, 0x4c, 0x6f, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x35,
	0x0a, 0x05, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x18, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xc1, 0x01,
	0x0a, 0x19, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x34, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x34, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x33, 0x30, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x33, 0x30, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x33, 0x30, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x33, 0x30, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x34, 0x38,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x34, 0x38,
	0x68, 0x22, 0x35, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x48, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61,
	0x6c, 0x6c, 0x22, 0x3a, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x60,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x02, 0x74, 0x78, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x40, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x34, 0x48, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x34, 0x48, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x32, 0x34,
	0x48, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x32, 0x34, 0x48, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x34, 0x38, 0x48,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x34, 0x38, 0x48,
	0x22, 0x37, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x80, 0x01,
	0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x72, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x22, 0x5a, 0x0a, 0x11, 0x54, 0x78, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x62, 0x0a, 0x12, 0x54, 0x78, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x33, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x34, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x61, 0x77, 0x4c, 0x6f, 0x67, 0x22, 0x34,
	0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x4a, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73,
	0x22, 0x18, 0x0a, 0x16, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x22, 0x7b, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x32, 0x34, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0x34, 0x48, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x34,
	0x38, 0x48, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x34,
	0x38, 0x48, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x33, 0x30, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x33, 0x30, 0x44, 0x22,
	0x63, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x2d, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x61,
	0x73, 0x68, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x4b, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x2c, 0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x3c,
	0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x1e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x09, 0x54, 0x78,
	0x73, 0x42, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x2e,
	0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x22, 0x86,
	0x01, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x73, 0x42,
	0x79, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x32, 0x34, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x34, 0x48, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x34, 0x38, 0x48, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x34, 0x38, 0x48, 0x22, 0x4c, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x0f, 0x54, 0x78, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x42, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x22, 0x52, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x54, 0x78, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x48, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x22, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x10, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x20, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x02,
	0x74, 0x78, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x78, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x66, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x83,
	0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x71, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x72, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x70, 0x0a, 0x20, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc1, 0x02,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x22, 0x72, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x3a, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x78, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x44, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x78, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x18, 0x54, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0x46, 0x0a, 0x19, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x78, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x12, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x13, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x44,
	0x65, 0x6e, 0x6f, 0x6d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x26, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x93, 0x01, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78,
	0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x02, 0x74, 0x78, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x3f, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x71, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40,
	0x0a, 0x17, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x32, 0xcd, 0x16, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x0c, 0x54, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x44, 0x61, 0x79, 0x12, 0x1b,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42,
	0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x79, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x54,
	0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x54, 0x78, 0x73,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x54, 0x78, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x78, 0x73, 0x42,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x77, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x11, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x48, 0x61, 0x73, 0x68, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x55,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x28, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x78, 0x12, 0x1f, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x11, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x54,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x09, 0x5a, 0x07, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_blocks_proto_rawDescOnce sync.Once
	file_blocks_proto_rawDescData []byte
)

func file_blocks_proto_rawDescGZIP() []byte {
	file_blocks_proto_rawDescOnce.Do(func() {
		file_blocks_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blocks_proto_rawDesc), len(file_blocks_proto_rawDesc)))
	})
	return file_blocks_proto_rawDescData
}

var file_blocks_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_blocks_proto_goTypes = []any{
	(*Block)(nil),                             // 0: blocks.Block
	(*GetBlockInfoRequest)(nil),               // 1: blocks.GetBlockInfoRequest
	(*GetBlockInfoResponse)(nil),              // 2: blocks.GetBlockInfoResponse
	(*GetBlockValidatorsRequest)(nil),         // 3: blocks.GetBlockValidatorsRequest
	(*GetBlockValidatorsResponse)(nil),        // 4: blocks.GetBlockValidatorsResponse
	(*TxByDay)(nil),                           // 5: blocks.TxByDay
	(*TxChartByDayRequest)(nil),               // 6: blocks.TxChartByDayRequest
	(*TxChartByDayResponse)(nil),              // 7: blocks.TxChartByDayResponse
	(*TxByHashRequest)(nil),                   // 8: blocks.TxByHashRequest
	(*TxByHashResponse)(nil),                  // 9: blocks.TxByHashResponse
	(*TxByHash)(nil),                          // 10: blocks.TxByHash
	(*TxSenderReceiver)(nil),                  // 11: blocks.TxSenderReceiver
	(*TxEvent)(nil),                           // 12: blocks.TxEvent
	(*Fee)(nil),                               // 13: blocks.Fee
	(*TxAuthInfo)(nil),                        // 14: blocks.TxAuthInfo
	(*SignerInfo)(nil),                        // 15: blocks.SignerInfo
	(*TxFee)(nil),                             // 16: blocks.TxFee
	(*TxTip)(nil),                             // 17: blocks.TxTip
	(*TxResponse)(nil),                        // 18: blocks.TxResponse
	(*TxLog)(nil),                             // 19: blocks.TxLog
	(*Denom)(nil),                             // 20: blocks.Denom
	(*TotalTransactionsRequest)(nil),          // 21: blocks.TotalTransactionsRequest
	(*TotalTransactionsResponse)(nil),         // 22: blocks.TotalTransactionsResponse
	(*Limit)(nil),                             // 23: blocks.Limit
	(*Result)(nil),                            // 24: blocks.Result
	(*TransactionsRequest)(nil),               // 25: blocks.TransactionsRequest
	(*TransactionsResponse)(nil),              // 26: blocks.TransactionsResponse
	(*TotalBlocksRequest)(nil),                // 27: blocks.TotalBlocksRequest
	(*TotalBlocksResponse)(nil),               // 28: blocks.TotalBlocksResponse
	(*GetBlocksRequest)(nil),                  // 29: blocks.GetBlocksRequest
	(*GetBlocksResponse)(nil),                 // 30: blocks.GetBlocksResponse
	(*BlockSignaturesRequest)(nil),            // 31: blocks.BlockSignaturesRequest
	(*BlockSignaturesResponse)(nil),           // 32: blocks.BlockSignaturesResponse
	(*SignerAddress)(nil),                     // 33: blocks.SignerAddress
	(*TxsByBlockRequest)(nil),                 // 34: blocks.TxsByBlockRequest
	(*TxsByBlockResponse)(nil),                // 35: blocks.TxsByBlockResponse
	(*TransactionRawLogRequest)(nil),          // 36: blocks.TransactionRawLogRequest
	(*TransactionRawLogResponse)(nil),         // 37: blocks.TransactionRawLogResponse
	(*TransactionSignersRequest)(nil),         // 38: blocks.TransactionSignersRequest
	(*TransactionSignersResponse)(nil),        // 39: blocks.TransactionSignersResponse
	(*CacheAggregatedRequest)(nil),            // 40: blocks.CacheAggregatedRequest
	(*CacheAggregatedResponse)(nil),           // 41: blocks.CacheAggregatedResponse
	(*TotalWallets)(nil),                      // 42: blocks.TotalWallets
	(*SearchResults)(nil),                     // 43: blocks.SearchResults
	(*SearchHashByTextRequest)(nil),           // 44: blocks.SearchHashByTextRequest
	(*SearchHashByTextResponse)(nil),          // 45: blocks.SearchHashByTextResponse
	(*BlockInfoByHashRequest)(nil),            // 46: blocks.BlockInfoByHashRequest
	(*BlockInfoByHashResponse)(nil),           // 47: blocks.BlockInfoByHashResponse
	(*ChartTransactionsByHourRequest)(nil),    // 48: blocks.ChartTransactionsByHourRequest
	(*TxsByHour)(nil),                         // 49: blocks.TxsByHour
	(*ChartTransactionsByHourResponse)(nil),   // 50: blocks.ChartTransactionsByHourResponse
	(*ChartTransactionsVolumeRequest)(nil),    // 51: blocks.ChartTransactionsVolumeRequest
	(*TxsVolumeByHour)(nil),                   // 52: blocks.TxsVolumeByHour
	(*ChartTransactionsVolumeResponse)(nil),   // 53: blocks.ChartTransactionsVolumeResponse
	(*BlockUpTimeRequest)(nil),                // 54: blocks.BlockUpTimeRequest
	(*BlockUpTimeResponse)(nil),               // 55: blocks.BlockUpTimeResponse
	(*UptimeByBlocksRequest)(nil),             // 56: blocks.UptimeByBlocksRequest
	(*BlockSigned)(nil),                       // 57: blocks.BlockSigned
	(*UptimeByBlocksResponse)(nil),            // 58: blocks.UptimeByBlocksResponse
	(*VotesTransaction)(nil),                  // 59: blocks.VotesTransaction
	(*GetVotesRequest)(nil),                   // 60: blocks.GetVotesRequest
	(*GetVotesResponse)(nil),                  // 61: blocks.GetVotesResponse
	(*GetPowerEventsRequest)(nil),             // 62: blocks.GetPowerEventsRequest
	(*GetPowerEventsResponse)(nil),            // 63: blocks.GetPowerEventsResponse
	(*GetValidatorHistoryEventsRequest)(nil),  // 64: blocks.GetValidatorHistoryEventsRequest
	(*GetValidatorHistoryEventsResponse)(nil), // 65: blocks.GetValidatorHistoryEventsResponse
	(*TransactionsByEventValueRequest)(nil),   // 66: blocks.TransactionsByEventValueRequest
	(*TransactionsByEventValueResponse)(nil),  // 67: blocks.TransactionsByEventValueResponse
	(*GetVotesByAccountsRequest)(nil),         // 68: blocks.GetVotesByAccountsRequest
	(*GetVotesByAccountsResponse)(nil),        // 69: blocks.GetVotesByAccountsResponse
	(*GetWalletsCountPerPeriodRequest)(nil),   // 70: blocks.GetWalletsCountPerPeriodRequest
	(*GetWalletsCountPerPeriodResponse)(nil),  // 71: blocks.GetWalletsCountPerPeriodResponse
	(*GetWalletsWithTxRequest)(nil),           // 72: blocks.GetWalletsWithTxRequest
	(*GetWalletsWithTxResponse)(nil),          // 73: blocks.GetWalletsWithTxResponse
	(*WalletWithTxs)(nil),                     // 74: blocks.WalletWithTxs
	(*TxCountByAccountsRequest)(nil),          // 75: blocks.TxCountByAccountsRequest
	(*TxCountByAccountsResponse)(nil),         // 76: blocks.TxCountByAccountsResponse
	(*AccountInfoRequest)(nil),                // 77: blocks.AccountInfoRequest
	(*AccountInfoResponse)(nil),               // 78: blocks.AccountInfoResponse
	(*DelegatesByValidatorRequest)(nil),       // 79: blocks.DelegatesByValidatorRequest
	(*DelegatesByValidatorResponse)(nil),      // 80: blocks.DelegatesByValidatorResponse
	(*SortBy)(nil),                            // 81: blocks.SortBy
	(*ProposalDeposit)(nil),                   // 82: blocks.ProposalDeposit
	(*ProposalDepositorsRequest)(nil),         // 83: blocks.ProposalDepositorsRequest
	(*ProposalDepositorsResponse)(nil),        // 84: blocks.ProposalDepositorsResponse
	(*RewardByAccountRequest)(nil),            // 85: blocks.RewardByAccountRequest
	(*RewardByAccountResponse)(nil),           // 86: blocks.RewardByAccountResponse
	(*timestamppb.Timestamp)(nil),             // 87: google.protobuf.Timestamp
}
var file_blocks_proto_depIdxs = []int32{
	87,  // 0: blocks.Block.generation_time:type_name -> google.protobuf.Timestamp
	0,   // 1: blocks.GetBlockInfoResponse.info:type_name -> blocks.Block
	87,  // 2: blocks.TxByDay.day:type_name -> google.protobuf.Timestamp
	87,  // 3: blocks.TxChartByDayRequest.from:type_name -> google.protobuf.Timestamp
	87,  // 4: blocks.TxChartByDayRequest.to:type_name -> google.protobuf.Timestamp
	5,   // 5: blocks.TxChartByDayResponse.tx_by_day:type_name -> blocks.TxByDay
	10,  // 6: blocks.TxByHashResponse.tx:type_name -> blocks.TxByHash
	14,  // 7: blocks.TxByHash.auth_info:type_name -> blocks.TxAuthInfo
	18,  // 8: blocks.TxByHash.tx_response:type_name -> blocks.TxResponse
	0,   // 9: blocks.TxByHash.block:type_name -> blocks.Block
	13,  // 10: blocks.TxByHash.fees:type_name -> blocks.Fee
	11,  // 11: blocks.TxByHash.sender_receiver:type_name -> blocks.TxSenderReceiver
	12,  // 12: blocks.TxByHash.events:type_name -> blocks.TxEvent
	16,  // 13: blocks.TxAuthInfo.fee:type_name -> blocks.TxFee
	17,  // 14: blocks.TxAuthInfo.tip:type_name -> blocks.TxTip
	15,  // 15: blocks.TxAuthInfo.signer_infos:type_name -> blocks.SignerInfo
	20,  // 16: blocks.TxFee.amount:type_name -> blocks.Denom
	20,  // 17: blocks.TxTip.amount:type_name -> blocks.Denom
	19,  // 18: blocks.TxResponse.logs:type_name -> blocks.TxLog
	87,  // 19: blocks.TotalTransactionsRequest.to:type_name -> google.protobuf.Timestamp
	23,  // 20: blocks.TransactionsRequest.limit:type_name -> blocks.Limit
	10,  // 21: blocks.TransactionsResponse.tx:type_name -> blocks.TxByHash
	24,  // 22: blocks.TransactionsResponse.result:type_name -> blocks.Result
	87,  // 23: blocks.TotalBlocksRequest.to:type_name -> google.protobuf.Timestamp
	23,  // 24: blocks.GetBlocksRequest.limit:type_name -> blocks.Limit
	0,   // 25: blocks.GetBlocksResponse.blocks:type_name -> blocks.Block
	24,  // 26: blocks.GetBlocksResponse.result:type_name -> blocks.Result
	23,  // 27: blocks.BlockSignaturesRequest.limit:type_name -> blocks.Limit
	33,  // 28: blocks.BlockSignaturesResponse.signers:type_name -> blocks.SignerAddress
	24,  // 29: blocks.BlockSignaturesResponse.result:type_name -> blocks.Result
	87,  // 30: blocks.SignerAddress.time:type_name -> google.protobuf.Timestamp
	23,  // 31: blocks.TxsByBlockRequest.limit:type_name -> blocks.Limit
	10,  // 32: blocks.TxsByBlockResponse.data:type_name -> blocks.TxByHash
	24,  // 33: blocks.TxsByBlockResponse.result:type_name -> blocks.Result
	15,  // 34: blocks.TransactionSignersResponse.signers:type_name -> blocks.SignerInfo
	22,  // 35: blocks.CacheAggregatedResponse.transactions:type_name -> blocks.TotalTransactionsResponse
	28,  // 36: blocks.CacheAggregatedResponse.blocks:type_name -> blocks.TotalBlocksResponse
	42,  // 37: blocks.CacheAggregatedResponse.wallets:type_name -> blocks.TotalWallets
	43,  // 38: blocks.SearchHashByTextResponse.results:type_name -> blocks.SearchResults
	0,   // 39: blocks.BlockInfoByHashResponse.info:type_name -> blocks.Block
	87,  // 40: blocks.ChartTransactionsByHourRequest.to:type_name -> google.protobuf.Timestamp
	87,  // 41: blocks.TxsByHour.hour:type_name -> google.protobuf.Timestamp
	49,  // 42: blocks.ChartTransactionsByHourResponse.points:type_name -> blocks.TxsByHour
	87,  // 43: blocks.ChartTransactionsVolumeRequest.to:type_name -> google.protobuf.Timestamp
	87,  // 44: blocks.TxsVolumeByHour.hour:type_name -> google.protobuf.Timestamp
	52,  // 45: blocks.ChartTransactionsVolumeResponse.points:type_name -> blocks.TxsVolumeByHour
	57,  // 46: blocks.UptimeByBlocksResponse.blocks:type_name -> blocks.BlockSigned
	87,  // 47: blocks.VotesTransaction.time:type_name -> google.protobuf.Timestamp
	10,  // 48: blocks.VotesTransaction.tx:type_name -> blocks.TxByHash
	23,  // 49: blocks.GetVotesRequest.limit:type_name -> blocks.Limit
	59,  // 50: blocks.GetVotesResponse.transactions:type_name -> blocks.VotesTransaction
	24,  // 51: blocks.GetVotesResponse.result:type_name -> blocks.Result
	23,  // 52: blocks.GetPowerEventsRequest.limit:type_name -> blocks.Limit
	10,  // 53: blocks.GetPowerEventsResponse.data:type_name -> blocks.TxByHash
	24,  // 54: blocks.GetPowerEventsResponse.result:type_name -> blocks.Result
	23,  // 55: blocks.GetValidatorHistoryEventsRequest.limit:type_name -> blocks.Limit
	10,  // 56: blocks.GetValidatorHistoryEventsResponse.data:type_name -> blocks.TxByHash
	24,  // 57: blocks.GetValidatorHistoryEventsResponse.result:type_name -> blocks.Result
	23,  // 58: blocks.TransactionsByEventValueRequest.limit:type_name -> blocks.Limit
	10,  // 59: blocks.TransactionsByEventValueResponse.data:type_name -> blocks.TxByHash
	24,  // 60: blocks.TransactionsByEventValueResponse.result:type_name -> blocks.Result
	23,  // 61: blocks.GetVotesByAccountsRequest.limit:type_name -> blocks.Limit
	81,  // 62: blocks.GetVotesByAccountsRequest.sort:type_name -> blocks.SortBy
	59,  // 63: blocks.GetVotesByAccountsResponse.data:type_name -> blocks.VotesTransaction
	24,  // 64: blocks.GetVotesByAccountsResponse.result:type_name -> blocks.Result
	87,  // 65: blocks.GetWalletsCountPerPeriodRequest.start:type_name -> google.protobuf.Timestamp
	87,  // 66: blocks.GetWalletsCountPerPeriodRequest.end:type_name -> google.protobuf.Timestamp
	23,  // 67: blocks.GetWalletsWithTxRequest.limit:type_name -> blocks.Limit
	74,  // 68: blocks.GetWalletsWithTxResponse.data:type_name -> blocks.WalletWithTxs
	24,  // 69: blocks.GetWalletsWithTxResponse.result:type_name -> blocks.Result
	74,  // 70: blocks.TxCountByAccountsResponse.data:type_name -> blocks.WalletWithTxs
	87,  // 71: blocks.AccountInfoResponse.first_tx_time:type_name -> google.protobuf.Timestamp
	20,  // 72: blocks.AccountInfoResponse.total_spent:type_name -> blocks.Denom
	20,  // 73: blocks.AccountInfoResponse.total_received:type_name -> blocks.Denom
	87,  // 74: blocks.DelegatesByValidatorRequest.from:type_name -> google.protobuf.Timestamp
	87,  // 75: blocks.DelegatesByValidatorRequest.to:type_name -> google.protobuf.Timestamp
	23,  // 76: blocks.DelegatesByValidatorRequest.limit:type_name -> blocks.Limit
	20,  // 77: blocks.DelegatesByValidatorResponse.totalSum:type_name -> blocks.Denom
	10,  // 78: blocks.DelegatesByValidatorResponse.tx:type_name -> blocks.TxByHash
	24,  // 79: blocks.DelegatesByValidatorResponse.result:type_name -> blocks.Result
	87,  // 80: blocks.ProposalDeposit.time:type_name -> google.protobuf.Timestamp
	20,  // 81: blocks.ProposalDeposit.amount:type_name -> blocks.Denom
	23,  // 82: blocks.ProposalDepositorsRequest.limit:type_name -> blocks.Limit
	81,  // 83: blocks.ProposalDepositorsRequest.sort:type_name -> blocks.SortBy
	82,  // 84: blocks.ProposalDepositorsResponse.data:type_name -> blocks.ProposalDeposit
	24,  // 85: blocks.ProposalDepositorsResponse.result:type_name -> blocks.Result
	20,  // 86: blocks.RewardByAccountResponse.amount:type_name -> blocks.Denom
	1,   // 87: blocks.BlocksService.BlockInfo:input_type -> blocks.GetBlockInfoRequest
	46,  // 88: blocks.BlocksService.BlockInfoByHash:input_type -> blocks.BlockInfoByHashRequest
	3,   // 89: blocks.BlocksService.BlockValidators:input_type -> blocks.GetBlockValidatorsRequest
	6,   // 90: blocks.BlocksService.TxChartByDay:input_type -> blocks.TxChartByDayRequest
	8,   // 91: blocks.BlocksService.TxByHash:input_type -> blocks.TxByHashRequest
	21,  // 92: blocks.BlocksService.TotalTransactions:input_type -> blocks.TotalTransactionsRequest
	25,  // 93: blocks.BlocksService.Transactions:input_type -> blocks.TransactionsRequest
	27,  // 94: blocks.BlocksService.TotalBlocks:input_type -> blocks.TotalBlocksRequest
	29,  // 95: blocks.BlocksService.GetBlocks:input_type -> blocks.GetBlocksRequest
	31,  // 96: blocks.BlocksService.BlockSignatures:input_type -> blocks.BlockSignaturesRequest
	34,  // 97: blocks.BlocksService.TxsByBlock:input_type -> blocks.TxsByBlockRequest
	36,  // 98: blocks.BlocksService.TransactionRawLog:input_type -> blocks.TransactionRawLogRequest
	38,  // 99: blocks.BlocksService.TransactionSigners:input_type -> blocks.TransactionSignersRequest
	25,  // 100: blocks.BlocksService.CacheTransactions:input_type -> blocks.TransactionsRequest
	29,  // 101: blocks.BlocksService.CacheGetBlocks:input_type -> blocks.GetBlocksRequest
	40,  // 102: blocks.BlocksService.CacheAggregated:input_type -> blocks.CacheAggregatedRequest
	44,  // 103: blocks.BlocksService.SearchHashByText:input_type -> blocks.SearchHashByTextRequest
	48,  // 104: blocks.BlocksService.ChartTransactionsByHour:input_type -> blocks.ChartTransactionsByHourRequest
	51,  // 105: blocks.BlocksService.ChartTransactionsVolume:input_type -> blocks.ChartTransactionsVolumeRequest
	54,  // 106: blocks.BlocksService.BlockUpTime:input_type -> blocks.BlockUpTimeRequest
	56,  // 107: blocks.BlocksService.UptimeByBlocks:input_type -> blocks.UptimeByBlocksRequest
	60,  // 108: blocks.BlocksService.GetVotes:input_type -> blocks.GetVotesRequest
	62,  // 109: blocks.BlocksService.GetPowerEvents:input_type -> blocks.GetPowerEventsRequest
	64,  // 110: blocks.BlocksService.GetValidatorHistoryEvents:input_type -> blocks.GetValidatorHistoryEventsRequest
	66,  // 111: blocks.BlocksService.TransactionsByEventValue:input_type -> blocks.TransactionsByEventValueRequest
	68,  // 112: blocks.BlocksService.GetVotesByAccounts:input_type -> blocks.GetVotesByAccountsRequest
	70,  // 113: blocks.BlocksService.GetWalletsCountPerPeriod:input_type -> blocks.GetWalletsCountPerPeriodRequest
	72,  // 114: blocks.BlocksService.GetWalletsWithTx:input_type -> blocks.GetWalletsWithTxRequest
	75,  // 115: blocks.BlocksService.TxCountByAccounts:input_type -> blocks.TxCountByAccountsRequest
	77,  // 116: blocks.BlocksService.AccountInfo:input_type -> blocks.AccountInfoRequest
	79,  // 117: blocks.BlocksService.DelegatesByValidator:input_type -> blocks.DelegatesByValidatorRequest
	83,  // 118: blocks.BlocksService.ProposalDepositors:input_type -> blocks.ProposalDepositorsRequest
	85,  // 119: blocks.BlocksService.RewardByAccount:input_type -> blocks.RewardByAccountRequest
	2,   // 120: blocks.BlocksService.BlockInfo:output_type -> blocks.GetBlockInfoResponse
	47,  // 121: blocks.BlocksService.BlockInfoByHash:output_type -> blocks.BlockInfoByHashResponse
	4,   // 122: blocks.BlocksService.BlockValidators:output_type -> blocks.GetBlockValidatorsResponse
	7,   // 123: blocks.BlocksService.TxChartByDay:output_type -> blocks.TxChartByDayResponse
	9,   // 124: blocks.BlocksService.TxByHash:output_type -> blocks.TxByHashResponse
	22,  // 125: blocks.BlocksService.TotalTransactions:output_type -> blocks.TotalTransactionsResponse
	26,  // 126: blocks.BlocksService.Transactions:output_type -> blocks.TransactionsResponse
	28,  // 127: blocks.BlocksService.TotalBlocks:output_type -> blocks.TotalBlocksResponse
	30,  // 128: blocks.BlocksService.GetBlocks:output_type -> blocks.GetBlocksResponse
	32,  // 129: blocks.BlocksService.BlockSignatures:output_type -> blocks.BlockSignaturesResponse
	35,  // 130: blocks.BlocksService.TxsByBlock:output_type -> blocks.TxsByBlockResponse
	37,  // 131: blocks.BlocksService.TransactionRawLog:output_type -> blocks.TransactionRawLogResponse
	39,  // 132: blocks.BlocksService.TransactionSigners:output_type -> blocks.TransactionSignersResponse
	26,  // 133: blocks.BlocksService.CacheTransactions:output_type -> blocks.TransactionsResponse
	30,  // 134: blocks.BlocksService.CacheGetBlocks:output_type -> blocks.GetBlocksResponse
	41,  // 135: blocks.BlocksService.CacheAggregated:output_type -> blocks.CacheAggregatedResponse
	45,  // 136: blocks.BlocksService.SearchHashByText:output_type -> blocks.SearchHashByTextResponse
	50,  // 137: blocks.BlocksService.ChartTransactionsByHour:output_type -> blocks.ChartTransactionsByHourResponse
	53,  // 138: blocks.BlocksService.ChartTransactionsVolume:output_type -> blocks.ChartTransactionsVolumeResponse
	55,  // 139: blocks.BlocksService.BlockUpTime:output_type -> blocks.BlockUpTimeResponse
	58,  // 140: blocks.BlocksService.UptimeByBlocks:output_type -> blocks.UptimeByBlocksResponse
	61,  // 141: blocks.BlocksService.GetVotes:output_type -> blocks.GetVotesResponse
	63,  // 142: blocks.BlocksService.GetPowerEvents:output_type -> blocks.GetPowerEventsResponse
	65,  // 143: blocks.BlocksService.GetValidatorHistoryEvents:output_type -> blocks.GetValidatorHistoryEventsResponse
	67,  // 144: blocks.BlocksService.TransactionsByEventValue:output_type -> blocks.TransactionsByEventValueResponse
	69,  // 145: blocks.BlocksService.GetVotesByAccounts:output_type -> blocks.GetVotesByAccountsResponse
	71,  // 146: blocks.BlocksService.GetWalletsCountPerPeriod:output_type -> blocks.GetWalletsCountPerPeriodResponse
	73,  // 147: blocks.BlocksService.GetWalletsWithTx:output_type -> blocks.GetWalletsWithTxResponse
	76,  // 148: blocks.BlocksService.TxCountByAccounts:output_type -> blocks.TxCountByAccountsResponse
	78,  // 149: blocks.BlocksService.AccountInfo:output_type -> blocks.AccountInfoResponse
	80,  // 150: blocks.BlocksService.DelegatesByValidator:output_type -> blocks.DelegatesByValidatorResponse
	84,  // 151: blocks.BlocksService.ProposalDepositors:output_type -> blocks.ProposalDepositorsResponse
	86,  // 152: blocks.BlocksService.RewardByAccount:output_type -> blocks.RewardByAccountResponse
	120, // [120:153] is the sub-list for method output_type
	87,  // [87:120] is the sub-list for method input_type
	87,  // [87:87] is the sub-list for extension type_name
	87,  // [87:87] is the sub-list for extension extendee
	0,   // [0:87] is the sub-list for field type_name
}

func init() { file_blocks_proto_init() }
func file_blocks_proto_init() {
	if File_blocks_proto != nil {
		return
	}
	file_blocks_proto_msgTypes[10].OneofWrappers = []any{}
	file_blocks_proto_msgTypes[68].OneofWrappers = []any{}
	file_blocks_proto_msgTypes[83].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blocks_proto_rawDesc), len(file_blocks_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blocks_proto_goTypes,
		DependencyIndexes: file_blocks_proto_depIdxs,
		MessageInfos:      file_blocks_proto_msgTypes,
	}.Build()
	File_blocks_proto = out.File
	file_blocks_proto_goTypes = nil
	file_blocks_proto_depIdxs = nil
}
