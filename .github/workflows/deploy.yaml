name: Deploy Indexer Image

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'celestia-prod'
        type: choice
        options:
          # mainnet
          - celestia-prod
          - story-prod
          - berachain-prod
          - nillion-prod
          - asi

          # testnet
          - 0g-testnet-prod
          - nillion-testnet-prod
          - story-testnet-prod
          - babylon-testnet-prod

          # dev
          - celestia-dev

jobs:
  deploy:
    runs-on: ubuntu-latest-minimal
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Deploy to remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            # Docker Login on the remote server
            echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Check if the Redis container is running, and start it if not
            if [ $(sudo docker ps -a --filter "name=^redis$" --format "{{.Names}}" | wc -l) -eq 0 ]; then
              echo "client-output-buffer-limit pubsub 20480mb 20480mb 60" > redis.conf
              sudo docker run -d --name redis \
                --restart unless-stopped \
                -p 127.0.0.1:6379:6379 \
                --network indexer_network \
                -v ./redis.conf:/usr/local/etc/redis/redis.conf \
                redis redis-server /usr/local/etc/redis/redis.conf
            else
              echo "Redis container is already running."
            fi

            # Check if the MongoDB container is running, and start it if not
            if [ $(sudo docker ps -a --filter "name=^mongo$" --format "{{.Names}}" | wc -l) -eq 0 ]; then
              sudo docker run -d --name mongo \
                --restart unless-stopped \
                --shm-size=1g \
                -e MONGO_INITDB_DATABASE=mongo \
                -e MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_USER }} \
                -e MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                -v mongo_indexer:/data/db \
                -p 127.0.0.1:27017:27017 \
                --network indexer_network \
                mongo:5.0.2
            else
              echo "MongoDB container is already running."
            fi

            # Check if the cosmos-indexer container is running, and remove it if it exists
            if [ $(sudo docker ps -a --filter "name=^cosmos-indexer$" --format "{{.Names}}" | wc -l) -ne 0 ]; then
              sudo docker rm -f cosmos-indexer
              echo "Cosmos-indexer container removed."
            fi

            # Pull the specified cosmos-indexer image
            sudo docker pull ghcr.io/${{ github.repository }}/cosmos-indexer:${{ github.event.inputs.image_tag }}

            # Start a new cosmos-indexer container with environment variables
            sudo docker run -d --name cosmos-indexer \
              -p 127.0.0.1:9012:9012 \
              -p 127.0.0.1:9002:9002 \
              --restart unless-stopped \
              --network indexer_network \
              ghcr.io/${{ github.repository }}/cosmos-indexer:${{ github.event.inputs.image_tag }} \
              /bin/sh -c "cosmos-indexer index \
                --log.pretty=true \
                --log.level=info \
                --base.start-block=${{ vars.BASE_START_BLOCK }} \
                --base.end-block=${{ vars.BASE_END_BLOCK || -1 }} \
                --base.throttling=${{ vars.BASE_THROTTLING || 0.105 }} \
                --base.rpc-workers=${{ vars.BASE_RPC_WORKERS || 3 }} \
                --base.index-transactions=${{ vars.BASE_INDEX_TRANSACTIONS || true }} \
                --base.reindex=${{ vars.BASE_REINDEX || false }} \
                --probe.rpc=${{ vars.PROBE_RPC || '' }} \
                --probe.account-prefix=${{ vars.PROBE_ACCOUNT_PREFIX }} \
                --probe.chain-id=${{ vars.PROBE_CHAIN_ID }} \
                --probe.chain-name=${{ vars.PROBE_CHAIN_NAME }} \
                --database.host=${{ vars.POSTGRES_HOST || 'postgres-indexer' }} \
                --database.database=${{ vars.POSTGRES_DATABASE || 'indexer' }} \
                --database.user=${{ secrets.POSTGRES_USER }} \
                --database.password=${{ secrets.POSTGRES_PASSWORD }} \
                --server.port=9002 \
                --redis.addr=redis:6379 \
                --mongo.addr=mongodb://${{ secrets.MONGO_USER }}:${{ secrets.MONGO_PASSWORD }}@mongo:27017 \
                --mongo.db=mongo"

            # Restart cosmos-explorer container
            sudo docker restart cosmos-explorer

            # Clean up unused Docker resources
            sudo docker system prune -f 